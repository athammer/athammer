<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Projects | Aaron Taylor Hammer</title>
  <% include ../partials/scripts %>
  <% include ../partials/style %>
</head>

<body>
  <% include ../partials/header %>
  <div class="main">

    <div id="main-content">
      <h1>Projects</h1>
      <br />

      <h1><a href="https://13chan.co/" target="_blank">Chrome Group Notifier Extension</a></h1>
      <hr class="no-margin"/>
      <br />
      <img class="img-left extraLineH" src="/static/img/13chan.png" alt="13chan" height="250px">
      <div class="text-left no-margin">
        <h2>&nbsp&nbsp Idea</h2>
        <h3>
           &nbsp&nbsp&nbsp 13chan was created out of response of the finial troubles of 4chan and the idea of creating a semi-anonymous ecosystem that let
           user's run the website with the admin's job simply being cleaning up and enforcing rules.
        </h3>

        <h2>&nbsp&nbsp Design</h2>
        <h3>
          &nbsp&nbsp&nbsp The design was very challenging, thankfully there were several sites I could look for inspiration and launch my own ideas from that. The site
          would consist of different levels of anonymity ranging from using user names, to full anonymity were only randomly generated IDs tied to their session would be displayed.
          Anonymous online communities highly value full anonymity and free speech, so this heavily influenced design of the website. This often trumps user experience and other
          cornerstones of many modern websites oddly enough. While UX was placed highly it was crucial that the site be simple, safe, and not invade the user's
          privacy. The website is designed to avoid the typical social media look as much as possible to avoid off putting users. Another critical design decision was how to
          identify users and let them log in. It was decided to let users register with an email then tying them with a name but letting them change their email.
          This was done so user's cannot change their identity and grief and for simplicity. User's would be able to create a board and customize
          it with regards to level of anonymity, file extensions allowed, and letting them rework some css. These user created boards would have their own sub domain of "b" (b for boards)
          for simplicity and avoid duplicate pages such as a user creating the board "/contact-us" or something similar.
        </h3>


        <h2>&nbsp&nbsp Current Features</h2>
        <h3>
          <ul>
            <li>Sessions were used, which I later regretted it would cause unnecessary server strain compared to tokens.</li>
            <li>Mongodb was chosen for it's salinity, documentation, and support within the Node.js community.</li>
            <li>TSL was used for more security and for the appearance of a more secure website. The website forces users to use https:// vs http:// by redirect.</li>
            <li>Email verification is currently used for users. Email verification is done through the backend creating a key that expires in thirty days (can be resent)
            then sending an email to the user with they unique key in the url. When clicked by the logged in user it is updated in the database that the user if verified.</li>
            <li>Flash messages are used to send updates from the backend to the front, for example the user name of the user when logged in and error messages.</li>
            <li>Dynamic user urls.</li>
            <li>Gulp automating CSS pre processor SASS/SCSS.</li>
            <li>Hosted on AWS's Elastic Beanstalk, might switch to Heroku do to costs.</li>
            <li>User permission levels</li>
            <li>User's ability to change email and password.</li>
            <li>Ability to create boards with a custom path and the ability to see said board.</li>
          </ul>
        </h3>

        <h2>&nbsp&nbsp Status</h2>
        <h3>
          On Hold, not completed. Please note currently 13chan is hosted on AWS but might be moved to Heroku to avoid server costs.
        </h3>
      </div>


      <h1><a href="https://chrome.google.com/webstore/detail/electro-legion-group-noti/eheaikjmbompbfeblpnidnnkfiilanie" target="_blank">Chrome Group Notifier Extension</a></h1>
      <hr class="no-margin"/>
      <br />
      <img class="img-left" src="/static/img/extension1.png" alt="reeee" height="150px">
      <img class="img-left" src="/static/img/extension2.png" alt="reeee" height="150px">
      <div class="text-left no-margin">
        <h2>&nbsp&nbsp Idea</h2>
        <h3>
           &nbsp&nbsp&nbsp The idea was came about with a discussion with friends on how to notifiy as many people as possible where ever they were on the computer
           and how easily we could make it to get them to respond.
        </h3>

        <h2>&nbsp&nbsp Design</h2>
        <h3>
          &nbsp&nbsp&nbsp When getting into this project I had no clue how to create a chrome extension so designing it was a challenge, but I knew I wanted to pack
          as much information as possible in a chrome notification and minimize the number of clicks the users had to do to respond. To do this I decided on using regex
          (which I later found was not the best way to go about it but rather a HTML parser such as BeautifulSoup), the regex was used to do the heavy lifting.
          The regex was looking for a special post called a "shout" on a group page's wall. Once a new shout was found it should then extract data from this shout
          such as who posted it, when it was posted, if there is any urls, and if there was a tag in the shout. The name was used to query other information from the website
          about the user to provide more information in the notification. The tags in the shout dictated what the shout was titled. It would also give the user some settings
          to provide a custom experience and to lower the "annoyance factor". These settings would include turning off a bell that would ring for each new shout, and
          whether it should send a notification on start up.
        </h3>


        <h2>&nbsp&nbsp Current Features</h2>
        <h3>
          <ul>
            <li>Costum user settings saved to chrome for seamless usage when closing broswer.</li>
            <li>Settings allowing users to turn off any features they do not like (including an on off button).</li>
            <li>Intelligently looking for urls in text with regex and then letting users click on the notifacation to decrease clicks for the user to respond.</li>
            <li>Not a feature but maxed concurrent users were at ~70 while as of 7/18/2017 users are around 57.</li>
          </ul>
        </h3>

        <h2>&nbsp&nbsp Status</h2>
        <h3>
          Completed, very rarely updated (might change soon) as group who used it is dead.
        </h3>
      </div>


      <h1>Automated Libary Room Confirmation</h1>
      <hr class="no-margin"/>
      <br />
      <img class="img-left extraLineH" src="/static/img/reee.png" alt="reeee" height="250px">
      <div class="text-left no-margin">
        <h2>&nbsp&nbsp Idea</h2>
        <h3>
           &nbsp&nbsp&nbsp Me and a friend started competing to see who could accept the library room booking first and
           post a picture of the confirmation to our group chat. Me being a CS major and having fiddled with Selenium before
           knew there was a better and faster way to accomplish this and win the race.
        </h3>

        <h2>&nbsp&nbsp Design</h2>
        <h3>
          &nbsp&nbsp&nbsp The only design requirments I had was it had to be fast and be efficient. For it to work it <head>
          to sign me in to Gmail, and to GroupMe, then refresh Gmail till the email arrived and then open the email and get the url to confirm
          the booking. It had to be smart enough to tell the difference between already opened messages and new emails so old emails were not opened.
          It then had to follow the url and hit a button, then find a new email for confirmation and take a screen shot of this and send it to the
          right chat in the GroupMe website.
        </h3>


        <h2>&nbsp&nbsp Current Features</h2>
        <h3>
          <ul>
            <li>Developed with Selenium and written in Python</li>
            <li>Simple progam and extremly niche, not much worth to note feature wise.</li>
          </ul>
        </h3>

        <h2>&nbsp&nbsp Status</h2>
        <h3>
          Completed, will be updated when needed.
        </h3>
      </div>
      <br />
      <br />

    </div>
  </div>
  <% include ../partials/footer %>
</body>

</html>
